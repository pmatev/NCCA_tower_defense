#ifndef STEERINGBEHAVIOURS_H
#define STEERINGBEHAVIOURS_H

#include <string>
#include "ngl/Vec3.h"
#include "entity.h"

class DynamicEntity;
class SteeringBehaviours;

struct BehaviourInfo
{
  ngl::Vec3 (SteeringBehaviours::*function)();
  bool enabled;
};

class SteeringBehaviours
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the ctor
  /// @param [in] _dEntity the dynamic entity used to initialise the object
  //----------------------------------------------------------------------------------------------------------------------
  SteeringBehaviours(EntityWPtr _entity);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the averaged steering force found using all enabled
  /// behaviours
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 calculate();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief accumulates the force.
  //----------------------------------------------------------------------------------------------------------------------
  bool accumulateForce(ngl::Vec3 _force);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief enables a behaviour
  /// @param [in] _behaviour the behaviour to enable
  //----------------------------------------------------------------------------------------------------------------------
  void enable(std::string _behaviour);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief disables a behaviour
  /// @param [in] _behaviour the behaviour to disable
  //----------------------------------------------------------------------------------------------------------------------
  void disable(std::string _behaviour);

protected:
  // ========== //
  // BEHAVIOURS //
  // ========== //
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief FollowPath returns a vector that follows the path
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 FollowPath();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ObstacleAvoidance will avoid local entities
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 ObstacleAvoidance();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Averages the repulsive forces for each nearby entities
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 Seperation();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Converges to the average position of nearby entities
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 Cohesion();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Aligns with nearby entities
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 Alignment();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Holds the parent dynamic entity
  //----------------------------------------------------------------------------------------------------------------------
  EntityWPtr m_entity;

  //----------------------------------------------------------------------------
  /// @brief holds the entities near the m_entity
  //----------------------------------------------------------------------------
  EntityRecordListWPtr m_localEntities;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the current steering force
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_steeringForce;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a map holding information about the registered functions
  //----------------------------------------------------------------------------------------------------------------------
  std::map<std::string, BehaviourInfo> m_registeredBehaviours;
};

#endif // STEERINGBEHAVIOURS_H
